
Cell types currently not detected, but which can be rescued:

    SCO-HYP - perhaps by analyzing ependymal cells separately
    DA1 vs DA2 - (Aldh1a1) may need some post-processing or fine-tuning

Cell types currently split too much:

    Astrocytes, both main types
        - seems to be due to some contamination by oligodendrocytes
        - maybe by analyzing separately from ependymal and using large merge threshold


Hi
just for the documentation, if we decide to have it in the pipeline.
for the big table with the data maybe you want to transform it to hd5/loom format.
amit

Spatial correlation of cell-types by allen brain ISH voxel dataset

(1) Load /mnt/sanger-data2/10X_adol_mice/allen_brain_ish_data/gridAnnotation.raw
 and reshape to 67x41x58 (rows x columns x depth). This file contain the voxels with the region ID.
Load annotation key file from Gioele /mnt/sanger-data2/10X_adol_mice/allen_brain_ish_data/AllenBrainReference_forAmit.txt.
Comments: the region annotation ID numbers are strange (not 1,2,3) so for me it make problems to plot it using normal colormap, so i first change them to some normal integers goes from 1 to number of regions.

(2) Load the voxel energy dataset:
/mnt/sanger-data2/10X_adol_mice/allen_brain_ish_data/AllenBrain_ISH_voxel_200um_67x41x58_13-Sep-2017.txt  (its a huge file).
For coronal genes DON'T average; take only the left. Saggital genes have anyway only the left hemisphare. Define the voxels that are outside the domain as those that have annotation=0. Set the voxel energy in the outside voxels to -1. 

(3) Define quality criteria for gene ISH as (¨invoxels¨ are the inside voxels):
sum(voxel_energy(:,invoxels)>5,2)>100 & mean(voxel_energy(:,invoxels),2)>0.2; (greater than 100 pixels with energy>5 and total mean greater than 0.2  among the inside pixels. This is based on my inspection and some scatter plots that a checked mean vs cv or variance or percentage positive.

(4) Normalized the energy voxel:
For each gene transform the energy by (log2(voxel_energy(i,in)+1) - m)/s , where m = mean(log2(voxel_energy(i,in)+1));s = std(log2(voxel_energy(i,in)+1));
and in = voxel_energy(i,:)>0;.

(5) Calculate correlation with cell-types:
load cell-types aggregates data, where each cell-types represented by the average expression. Finding enriched genes per cluster (similar to our normal procedure). Narrow down the features to the intersect of enriched genes and quality pass ISH.
Calculate correlation between each cell type expression (log2+1) and voxel profile (after the normalization above). 

(6) Calculate region fold enrichment: for each cell-types take the top 100 pixels and calculate the fold enrichment of the region ID that are among them by normalizing to frequency within the 100 to the overall frequency of each region ID.



few problems suggestion:

1. remove outliers based on dbscan like i said before.

2. remove cells that are misplaced, if a cell KNN are not from the same class exclude it. there are many examples of cells scattering around, they are most likely doublets or misplaced.

3. might be necessary to remove whole clusters of the majority are from exclude class. many times these clusters have some of the cells assign to other class which is probably not correct (see for example cortex2 clusters 4,9,33)

4. mainly in the periphery classifier dont work good. ENS cluster 19, sympathetic 2,3,4,6, DRG 2,19,22. (maybe we can live with it and exclude later)

5. remove clusters enrich with Hba genes. i think you had something like that.




here is my suggestion for polishing the Louvain clustering:

remove cells:

1. identify as outliers by DBSCAN with MinPts=10, eps_prc=80.

2. have less than 20% of closest neighbors in the embedding from their clusters.


below is a code for identify problematic clusters and break them. so far it works very nice.

lines with % are comments

% c_id - cluster id per cell
% mapped_xy is the embedding
c_id_uni = unique(c_id);
all_ol = false(length(c_id),1); % initiate outliers
c_id_new = double(c_id); % this will be the new vector of cluster id
for ii=1:length(c_id_uni)
   in = c_id==c_id_uni(ii);
   prj = pca_wis(mapped_xy(in,:));%use the PCA to rotate the cluster to the principle axes
   x = prj(:,1); y = prj(:,2);
   x = (x-mean(x))/std(x); % standardize the x and y
   y = (y-mean(y))/std(y);
   ol = false(size(x));
   for jj=1:5 % do it 5 times (arbitrary)
       oltmp = isoutlier(x(~ol)) | isoutlier(y(~ol),'grubbs'); % isoutlier is a matlab function for 1D data, so check both x and y
       tmp = find(~ol);
       ol(tmp(oltmp)) = true;
   end
   in = find(in);
   all_ol(in(ol)) = true; % store the outliers list

%     here i do KNN on the specific cluster embedding but it is mostly to
%     find the epsilon like we do in DBSCAN, (no need for KNN)
   D = squareform(pdist([x,y]),'tomatrix');
   [~,XI] = sort(D,'ascend');
   MinPts = max([5,round(0.1*length(x))]);
   epsilon_prc = [70];
   knn_rad = zeros(length(D),1);
   knnmat = zeros(size(D));
   for i=1:length(knn_rad)
       knn_rad(i) = D(i,XI(MinPts,i));
       knnmat(i,XI(1:MinPts,i)) = 1;
       knnmat(XI(1:MinPts,i),i) = 1;
   end
   epsilon = prctile(knn_rad,epsilon_prc);
%   the criteria for broken cluster is: (1) more than 3 outliers OR (2)
%   there is less than half MinPts in a radius around the center of the
%   cluster (center is in (0,0) since we standardize x,y)
   if sum(sqrt(x.^2+y.^2)<epsilon)<MinPts*0.5 | sum(ol)>3
       [idx, isnoise] = DBSCAN([x,y],epsilon,MinPts); % if cluster is broken apply DBSCAN and update the cluster id list
       c_id_new(in) = 100*(c_id_new(in)+1) + idx;%max(c_id_new) + idx;
   end
end

% % % % % % % % % % % % % % % % % % %
% after this do majority for cluster id according to KNN on the embedding.
% i used 50 but i can be adapted to the size of the problem.
D = squareform(pdist(mapped_xy),'tomatrix');
[~,XI] = sort(D,'ascend');
rmv = false(length(D),1);
tmp = zeros(size(c_id_new));
for i=1:length(D)
   tmp(i) = mode(c_id_new(XI(1:50,i)));
end
c_id_new = tmp;



1. PCA for polished Louvain
2. Apply bucket rules to level 2, write to loom
3. Write bucket file (cluster, number of cells, bucket, new bucket, comments)
4. Plot classes, neurotransmitter L1, L2, L3


i was doing something very simple

1. for each cluster for example "gr1" find those genes that have trinarization score >0.9 in all the clusters

indcan1 = find(mean(data_t(:,gr1)>0.9,2)==1); % data_t is genesXclusters

2. then the score is the difference between mean trinarization score within group compare to the rest of the clusters.
score = mean(data_t(:,gr1)>0.9,2) - mean(data_t(:,~gr1)>0.9,2);

sort the score and plot the top 10 only if they are above 0.9 or 0.8

amit